// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: F1CarTelemetryReport.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export interface F1CarTelemetryReport {
  driver: string;
  latitude: number;
  longitude: number;
  speedKmh: number;
  engineRpm: number;
  gear: number;
  throttlePercent: number;
  brakeOn: boolean;
  onTrack: boolean;
}

function createBaseF1CarTelemetryReport(): F1CarTelemetryReport {
  return {
    driver: "",
    latitude: 0,
    longitude: 0,
    speedKmh: 0,
    engineRpm: 0,
    gear: 0,
    throttlePercent: 0,
    brakeOn: false,
    onTrack: false,
  };
}

export const F1CarTelemetryReport: MessageFns<F1CarTelemetryReport> = {
  encode(message: F1CarTelemetryReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.driver !== "") {
      writer.uint32(10).string(message.driver);
    }
    if (message.latitude !== 0) {
      writer.uint32(17).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(25).double(message.longitude);
    }
    if (message.speedKmh !== 0) {
      writer.uint32(37).float(message.speedKmh);
    }
    if (message.engineRpm !== 0) {
      writer.uint32(45).float(message.engineRpm);
    }
    if (message.gear !== 0) {
      writer.uint32(48).uint32(message.gear);
    }
    if (message.throttlePercent !== 0) {
      writer.uint32(56).uint32(message.throttlePercent);
    }
    if (message.brakeOn !== false) {
      writer.uint32(64).bool(message.brakeOn);
    }
    if (message.onTrack !== false) {
      writer.uint32(72).bool(message.onTrack);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): F1CarTelemetryReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseF1CarTelemetryReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.driver = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.speedKmh = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.engineRpm = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.gear = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.throttlePercent = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.brakeOn = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.onTrack = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): F1CarTelemetryReport {
    return {
      driver: isSet(object.driver) ? globalThis.String(object.driver) : "",
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      speedKmh: isSet(object.speedKmh) ? globalThis.Number(object.speedKmh) : 0,
      engineRpm: isSet(object.engineRpm) ? globalThis.Number(object.engineRpm) : 0,
      gear: isSet(object.gear) ? globalThis.Number(object.gear) : 0,
      throttlePercent: isSet(object.throttlePercent) ? globalThis.Number(object.throttlePercent) : 0,
      brakeOn: isSet(object.brakeOn) ? globalThis.Boolean(object.brakeOn) : false,
      onTrack: isSet(object.onTrack) ? globalThis.Boolean(object.onTrack) : false,
    };
  },

  toJSON(message: F1CarTelemetryReport): unknown {
    const obj: any = {};
    if (message.driver !== "") {
      obj.driver = message.driver;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.speedKmh !== 0) {
      obj.speedKmh = message.speedKmh;
    }
    if (message.engineRpm !== 0) {
      obj.engineRpm = message.engineRpm;
    }
    if (message.gear !== 0) {
      obj.gear = Math.round(message.gear);
    }
    if (message.throttlePercent !== 0) {
      obj.throttlePercent = Math.round(message.throttlePercent);
    }
    if (message.brakeOn !== false) {
      obj.brakeOn = message.brakeOn;
    }
    if (message.onTrack !== false) {
      obj.onTrack = message.onTrack;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<F1CarTelemetryReport>, I>>(base?: I): F1CarTelemetryReport {
    return F1CarTelemetryReport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<F1CarTelemetryReport>, I>>(object: I): F1CarTelemetryReport {
    const message = createBaseF1CarTelemetryReport();
    message.driver = object.driver ?? "";
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.speedKmh = object.speedKmh ?? 0;
    message.engineRpm = object.engineRpm ?? 0;
    message.gear = object.gear ?? 0;
    message.throttlePercent = object.throttlePercent ?? 0;
    message.brakeOn = object.brakeOn ?? false;
    message.onTrack = object.onTrack ?? false;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
